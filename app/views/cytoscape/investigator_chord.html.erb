<script type="text/javascript">


d3.json('<%= image_path(@json_callback).split('?').first -%>', function(imports) {
  var indexByName = {},
      nameByIndex = {},
      matrix = [],
      n = 0;

  // Returns the Flare package name for the given class name.
  function name(name) {
    return name;
  }

  // Compute a unique index for each package name.
  imports.forEach(function(d) {
    d = name(d.name);
    if (!(d in indexByName)) {
      nameByIndex[n] = d;
      indexByName[d] = n++;
    }
  });

  // Construct a square matrix counting package imports.
  imports.forEach(function(d) {
    var source = indexByName[name(d.name)],
        row = matrix[source];
    if (!row) {
     row = matrix[source] = [];
     for (var i = -1; ++i < n;) row[i] = 0;
    }
    d.imports.forEach(function(d) { row[indexByName[name(d)]]++; });
  });


  var chord = d3.layout.chord()
     .padding(.05)
     .sortSubgroups(d3.descending)
     .matrix(matrix);


 var width = 900,
     height = 900,
     innerRadius = 700/2,
     outerRadius = innerRadius * 1.05;

 var fill = d3.scale.category20c();

 var svg = d3.select("#chart")
   .append("svg")
     .attr("width", width)
     .attr("height", height)
   .append("g")
     .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

 svg.append("g")
   .selectAll("path")
     .data(chord.groups)
   .enter().append("path")
     .style("fill", function(d) { return fill(d.index); })
     .style("stroke", function(d) { return fill(d.index); })
     .attr("d", d3.svg.arc().innerRadius(innerRadius).outerRadius(outerRadius))
     .on("mouseover", fade(.1))
     .on("mouseout", fade(1));

 var ticks = svg.append("g")
   .selectAll("g")
     .data(chord.groups)
   .enter().append("g")
   .selectAll("g")
     .data(groupTicks)
   .enter().append("g")
     .attr("transform", function(d) {
       return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
           + "translate(" + outerRadius + ",0)";
     });



 

 svg.append("g")
     .attr("class", "chord")
   .selectAll("path")
     .data(chord.chords)
   .enter().append("path")
     .style("fill", function(d) { return fill(d.target.index); })
     .attr("d", d3.svg.chord().radius(innerRadius))
     .style("opacity", 1);

 /** Returns an array of tick angles and labels, given a roup.*/
 function groupTicks(d) {
   var k = (d.endAngle - d.startAngle) / d.value;
   return d3.range(0, d.value, 1000).map(function(v, i) {
     return {
       angle: v * k + d.startAngle,
       label: i % 5 ? null : v / 1000 + "k"
     };
   });
 }

 /** Returns an event handler for fading a given chord group. */
 function fade(opacity) {
   return function(g, i) {
     svg.selectAll("g.chord path")
         .filter(function(d) {
           return d.source.index != i && d.target.index != i;
         })
       .transition()
         .style("opacity", opacity);
   };
 }
var arc = d3.svg.arc()
    .innerRadius(outerRadius)
    .outerRadius(outerRadius + 20);

var g = svg.selectAll("g.group")
      .data(chord.groups)
    .enter().append("svg:g")
      .attr("class", "group");

  g.append("svg:path")
      .style("fill", function(d) { return fill(d.index); })
      .style("stroke", function(d) { return fill(d.index); })
      .attr("d", arc);

  g.append("svg:text")
      .each(function(d) { d.angle = (d.startAngle + d.endAngle) / 2; })
      .attr("dy", ".35em")
      .attr("text-anchor", function(d) { return d.angle > Math.PI ? "end" : null; })
      .attr("transform", function(d) {
        return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
            + "translate(" + (outerRadius + 26) + ")"
            + (d.angle > Math.PI ? "rotate(180)" : "");
      })
      .text(function(d) { return nameByIndex[d.index]; });

});


</script>
<h2 style="position:absolute; left:100px; top10px; text-align:center;"><%= @title %></h2>
<div id="chart">&nbsp;</div>
